---
type Props = {
  url: string;
  label: string;
  thumbnailQuality?: 'default' | 'hqdefault' | 'mqdefault' | 'sddefault' | 'maxresdefault';
  lazyLoad?: boolean;
  animateEntry?: boolean;
};

const { 
  url, 
  label, 
  thumbnailQuality = 'hqdefault',
  lazyLoad = true,
  animateEntry = true
} = Astro.props;

// Extract video ID from YouTube URL
function getYouTubeVideoId(url: string): string | null {
  const regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*/;
  const match = url.match(regExp);
  return (match && match[7].length === 11) ? match[7] : null;
}

const videoId = getYouTubeVideoId(url);
const thumbnailUrl = videoId ? `https://img.youtube.com/vi/${videoId}/${thumbnailQuality}.jpg` : null;

// Prepare structured data for SEO
const videoData = {
  src: url,
  name: label,
  thumbnailUrl: thumbnailUrl
};

// Animation classes
const animationClasses = animateEntry ? 'transition-all duration-500 transform' : '';
---

<div 
  class="youtube-embed aspect-video relative overflow-hidden rounded-lg bg-gray-200 dark:bg-gray-800 shadow-md"
  data-video-id={videoId}
  data-video-url={url}
  data-video-title={label}
>
  {lazyLoad ? (
    <>
      <!-- YouTube Thumbnail with Play Button Overlay -->
      <div class="youtube-embed-thumbnail cursor-pointer w-full h-full relative">
        {thumbnailUrl && (
          <img 
            src={thumbnailUrl} 
            alt={`${label} thumbnail`} 
            class={`w-full h-full object-cover ${animationClasses}`}
            loading="lazy"
          />
        )}
        <div class="absolute inset-0 flex items-center justify-center">
          <div class="play-button w-16 h-16 md:w-20 md:h-20 bg-red-600 rounded-full flex items-center justify-center transition-transform duration-300 hover:scale-110 hover:bg-red-700">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 md:h-10 md:w-10 text-white" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
            </svg>
          </div>
        </div>
      </div>
      <!-- This div will be replaced with the iframe when clicked -->
      <div class="youtube-embed-iframe hidden"></div>
    </>
  ) : (
    <!-- Direct iframe embed without lazy loading -->
    <iframe
      class={`w-full h-full ${animationClasses}`}
      src={url}
      title={label}
      loading="lazy"
      frameborder="0"
      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
      allowfullscreen
    ></iframe>
  )}
</div>

<script>
  // Initialize YouTube embeds when the DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const youtubeEmbeds = document.querySelectorAll('.youtube-embed');
    
    youtubeEmbeds.forEach(embed => {
      const thumbnail = embed.querySelector('.youtube-embed-thumbnail');
      const iframeContainer = embed.querySelector('.youtube-embed-iframe');
      
      if (thumbnail && iframeContainer) {
        thumbnail.addEventListener('click', () => {
          const videoId = embed.getAttribute('data-video-id');
          const videoTitle = embed.getAttribute('data-video-title');
          
          // Create and insert the iframe
          const iframe = document.createElement('iframe');
          iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1`;
          iframe.title = videoTitle || 'YouTube video';
          iframe.frameBorder = '0';
          iframe.allow = 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture';
          iframe.allowFullscreen = true;
          iframe.classList.add('w-full', 'h-full');
          
          // Replace the thumbnail with the iframe
          iframeContainer.appendChild(iframe);
          iframeContainer.classList.remove('hidden');
          thumbnail.classList.add('hidden');
        });
      }
    });
  });
</script>

<!-- Export video data for SEO -->
<script type="application/json" id={`video-data-${videoId}`} set:html={JSON.stringify(videoData)} />


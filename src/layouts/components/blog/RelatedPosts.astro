---
import { getCollection } from 'astro:content';
import { Image } from 'astro:assets';
import { formatDate } from '@utils/date';

interface Props {
  currentPost: any;
  limit?: number;
}

const { currentPost, limit = 3 } = Astro.props;
const allPosts = await getCollection('posts');

// Filter out the current post
const otherPosts = allPosts.filter(post => post.slug !== currentPost.slug);

// Function to get related posts
function getRelatedPosts(currentPost, otherPosts, limit) {
  // Get posts with matching tags
  const postsByTags = otherPosts.filter(post => {
    const postTags = post.data.tags || [];
    const currentTags = currentPost.data.tags || [];
    return currentTags.some(tag => postTags.includes(tag));
  });

  // If we have enough posts with matching tags, return them
  if (postsByTags.length >= limit) {
    // Shuffle the array to get random posts with matching tags
    return shuffleArray(postsByTags).slice(0, limit);
  }

  // If we don't have enough posts with matching tags, get posts with matching categories
  const postsByCategories = otherPosts.filter(post => {
    const postCategories = post.data.categories || [];
    const currentCategories = currentPost.data.categories || [];
    return currentCategories.some(category => postCategories.includes(category));
  });

  // Combine unique posts from tags and categories
  const combinedPosts = [...postsByTags];
  
  // Add posts from categories that aren't already included
  postsByCategories.forEach(post => {
    if (!combinedPosts.some(p => p.slug === post.slug)) {
      combinedPosts.push(post);
    }
  });

  // If we have enough combined posts, return them
  if (combinedPosts.length >= limit) {
    return shuffleArray(combinedPosts).slice(0, limit);
  }

  // If we still don't have enough posts, add random posts
  const remainingPosts = otherPosts.filter(post => 
    !combinedPosts.some(p => p.slug === post.slug)
  );
  
  const result = [...combinedPosts, ...shuffleArray(remainingPosts)];
  return result.slice(0, limit);
}

// Helper function to shuffle an array
function shuffleArray(array) {
  const newArray = [...array];
  for (let i = newArray.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [newArray[i], newArray[j]] = [newArray[j], newArray[i]];
  }
  return newArray;
}

const relatedPosts = getRelatedPosts(currentPost, otherPosts, limit);
---

<section class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
  <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">Related Posts</h2>
  
  <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
    {relatedPosts.map((post) => (
      <div class="bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow duration-300">
        <a href={`/${post.slug}/`} class="block">
          {post.data.image && (
            <div class="aspect-video overflow-hidden">
              <Image 
                src={post.data.image} 
                alt={post.data.title} 
                class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                width={400}
                height={225}
              />
            </div>
          )}
          
          <div class="p-4">
            <div class="text-xs text-gray-500 dark:text-gray-400 mb-2">
              {post.data.date && formatDate(post.data.date)}
            </div>
            
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2 line-clamp-2">
              {post.data.title}
            </h3>
            
            {post.data.description && (
              <p class="text-sm text-gray-600 dark:text-gray-300 mb-3 line-clamp-2">
                {post.data.description}
              </p>
            )}
            
            {post.data.tags && post.data.tags.length > 0 && (
              <div class="flex flex-wrap gap-2 mt-2">
                {post.data.tags.slice(0, 2).map((tag) => (
                  <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full text-xs">
                    #{tag}
                  </span>
                ))}
              </div>
            )}
          </div>
        </a>
      </div>
    ))}
  </div>
</section>
